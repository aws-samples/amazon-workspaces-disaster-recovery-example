AWSTemplateFormatVersion: 2010-09-09
Description: >-
  Join Windows instance to AWS-Active Directory or Microsoft AD (no powershell).
  Create SSM document, IAM Role, SSM doc and EC2 Instance. Attaches EC2 instance
  to AD. Will need to use Domain Logins to RDP in.
Parameters:
  AMI:
    Type: String
    Default: ami-0b91c01eb7fffd30b
    Description: Windows 2016 AMI available in your region
  KeyPair:
    Type: 'AWS::EC2::KeyPair::KeyName'
    Description: KeyPair for EC2 Instance
  PublicSubnet:
    Type: 'AWS::EC2::Subnet::Id'
    Description: Subnet to place instance in
  VPC:
    Type: 'AWS::EC2::VPC::Id'
    Description: VPC to place instance in
  InstanceType:
    Type: String
    Default: t2.micro
    AllowedValues:
      - t2.micro
    ConstraintDescription: Must be a valid EC2 instance type.
  ADDirectoryId:
    Type: String
    Description: Active DirectoryId. Eg. d-12345679a
  ADDirectoryName:
    Type: String
    Description: Active Directory Name. Eg. my.ad.com
  ADDnsIpAddresses1:
    Type: String
    Description: Active Directory DNS 1. Eg. 10.0.0.142
  ADDnsIpAddresses2:
    Type: String
    Description: Active Directory DNS 2. Eg. 10.0.0.143
Resources:
  myssmdocument:
    Type: 'AWS::SSM::Document'
    Properties:
      Content:
        schemaVersion: '1.2'
        description: Join instances to an AWS Directory Service domain.
        parameters:
          directoryId:
            type: String
            description: (Required) The ID of the AWS Directory Service directory.
          directoryName:
            type: String
            description: >-
              (Required) The name of the directory; for example,
              test.example.com
          dnsIpAddresses:
            type: StringList
            default: []
            description: >-
              (Optional) The IP addresses of the DNS servers in the directory.
              Required when DHCP is not configured. Learn more at
              http://docs.aws.amazon.com/directoryservice/latest/simple-ad/join_get_dns_addresses.html
            allowedPattern: >-
              ((25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)
        runtimeConfig:
          'aws:domainJoin':
            properties:
              directoryId: '{{ directoryId }}'
              directoryName: '{{ directoryName }}'
              dnsIpAddresses: '{{ dnsIpAddresses }}'
  myEC2InstanceSSM:
    Type: 'AWS::EC2::Instance'
    Properties:
      IamInstanceProfile: !Ref myInstanceProfile
      SsmAssociations:
        - DocumentName: !Ref myssmdocument
          AssociationParameters:
            - Key: directoryId
              Value:
                - !Ref ADDirectoryId
            - Key: directoryName
              Value:
                - !Ref ADDirectoryName
            - Key: dnsIpAddresses
              Value:
                - !Ref ADDnsIpAddresses1
                - !Ref ADDnsIpAddresses2
      KeyName: !Ref KeyPair
      ImageId: !Ref AMI
      InstanceType: !Ref InstanceType
      Tags:
        - Key: Name
          Value: myEC2InstanceSSM
      SubnetId: !Ref PublicSubnet
      SecurityGroupIds:
        - !GetAtt 
          - InstanceSecurityGroup
          - GroupId
  myInstanceProfile:
    Type: 'AWS::IAM::InstanceProfile'
    Properties:
      Roles:
        - DemoEC2SSMRole
      InstanceProfileName: myEC2SSMRole
  myEC2SSMRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ec2.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      ManagedPolicyArns:
        - 'arn:aws:iam::aws:policy/service-role/AmazonEC2RoleforSSM'
      RoleName: DemoEC2SSMRole
  InstanceSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: Allow http to client host
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: '3389'
          ToPort: '3389'
          CidrIp: 0.0.0.0/0
